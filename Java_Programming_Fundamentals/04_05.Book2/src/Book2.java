// 생성자 : 객체가 생성될 때 초기화를 위해서 자동으로 한 번 호출(실행)되는 메소드
// 생성자는 new를 통해 객체를 생성되며, 생성될 때, 반드시 객체당 한 번 호출.
// 리턴 타입을 따로 생성할 수 없다. 
// 기본 생성자 : 매개 변수 겂고 아무 작업 없이 단순 리턴하는 생성자(디폴트 생성자라고 부르기도 함)
// 클래스에 생성자가 하나도 선언되지 않은 경우, 컴파일러에 의해 자동으로 삽입
// 클래스에 생성자가 하나라도 작성된 경우 기본생성자는 자동 삽입되지 않음.
// 함수의 오버로딩 (메소드 인자의 개수나 자료형에 따라 생성자를 여러 개 선언하는 것)
public class Book2 {
	
	String title;
	String author;

	void show() {
		System.out.println(title + " " + author);
	}

	// 함수의 오버로딩 (메소드 인자의 개수나 자료형에 따라 다른게 선언하는 것)	
	public Book2() { // 메소드 인자가 없는 생성자 
		// this : 객체 자신에 대한 래퍼런스, this.멘버변수 는 클래스이름.멘버변수로 생각할 수 있다.
		// this가 필요한 경우
		// 멤버변수와 메소드변수의 이름이 같은 경우나, 객체 자신의 레퍼런스를 전달하여 다른 메소드를 호출하거나,
		// 메소드가 객체 자신의 레퍼런스(주소)를 반환활 때 this를 사용
		// this.변수1 -> class내 지역변수 (변수1)를 호출.
		// this(인자들) -> class내 인자들의 숫자와 같은 생성자를 호출
		// 반드시 생성자 코드의 제일 처음에 수행, 생성자 내에서만 사용 가능
		// this로 메소드 인자가 2개인 2번째 오버로딩 함수를 호출
		this("", "");
		System.out.println("기본생성자 호출됨");
		// this("", ""); # 이 문장은 this함수가 생성자 코드 제일 첫 번째에 작성되지 않아서 오류이다.
	}

	public Book2(String title) { // 메소드 인자가 2개가 있는 생성자 
		// this로 메소드 인자가 2개인 2번째 오버로딩 함수를 호출
		this(title, "작자미상");
		System.out.println("생성자1 호출됨");
	}

	public Book2(String title, String author) { // 메소드 인자가 2개가 있는 생성자 
		this.title = title; this.author = author;
		System.out.println("생성자2 호출됨");
	}

	public static void main(String[] args) {
		// 메소드 인자가 2개인 2번째 오버로딩 함수를 호출
		Book2 littlePrince = new Book2("어린왕자", "생텍쥐페리");
		
		// 메소드 인자가 1개인 1번째 오버로딩 함수를 호출
		// 함수의 순서에 따라 다음으로, 메소드 인자가 2개인 2번째 오버로딩 함수를 호출
		Book2 loveStory = new Book2("춘향전");
		
		// 메소드 인자가 없는 기본 생성자를 호풀
		// 함수의 순서에 따라 다음으로, 시스템 출력 후 메소드 인자가 2개인 2번째 오버로딩 함수를 호출
		Book2 emptyBook = new Book2();
		
		// 출력
		loveStory.show();
	}
}

// 출력
// 생성자2 호출됨
// 생성자2 호출됨
// 생성자1 호출됨
// 생성자2 호출됨
// 기본생성자 호출됨
// 춘향전 작자미상