// 메소드 형식
// 메소드는 클래스 멤버의 함수이고, c의 함수와 동일하다.
// 자바의 모든 메소드는 반드시 클래스 안에 있어야 한다.(캢슐화 원칙)

// 메소드의 구성 형식
// 접근지정자 리턴타입 메소드이름 (메소드인자들){...}

// 접근지정자 : public, protected, 디폴트, private 
// 리턴타입 : 메소드가 반환하는 값의 데이터 타입

// 자바에서의 인자 전달 방법
// 기본 타입의 경우 값은 값을 복사
// 그 외 객체, 배열들은 레퍼런스(주소) 전달, 메소드의 매개변수와 호출한 실인자 객체나 배열 공유
// 배열이 전달 되는 경우 배열 전체가 전달 되는 것이 아니라 레퍼런스(주소)만 전달되서 공유가 되는 것이다.

public class ArrayParameterEX {

	// 접근 지정자 : 멤버를 보호하는 캡슐화의 정체에 묶인 보호를 일부 해제할 목적으로 생성
	// 접근 지정자의 종류 : public, protected, 디폴트, private 
	// 패키지 : 관련 있는 클래스 파일( .class)을 저장하는 디렉터리
	// public : 모든 패키지의 모든 클래스의 접근을 허용한다.
	// protected : 같은 패키지의 자식 클래스에 허용.
	// 디폴트(생략, package-private라고도 불림) : 같은 패키지의 클래스에만 허용.
	// private : 같은 클래스 내에서만 가능(패키지 이동 불가) 외부로부터 완벽차단 

	// non-static 멤버(인스턴스 멤버)
 	// 공간적 특성 : 멤버들은 객체마다 독립적으로 별도 존재
	// 시간적 특성 : 필드와 메소드는 객체 생성 후 비로소 사용가능
	// 비공유 특성 : 멤버들은 다른 객체에 의해 공유되지 않고 배타적
	// static 멤버(클래스 멤버): 클래스당 하나만 생성되면서 객체를 생성하지 않고 사용할 수 있다.
 	// 공간적 특성 : static 멤버들은 클래스 당 하나만 객체 내부가 아닌 클래스 코드가 적재되는 곳에 별도 생성 
	// 시간적 특성 : static 멤버들은 클래스가 로딩될 때 공간 할당. 즉 객체 생성 전에 이미 생성되고 사용 가능.
	//             : 객체가 사라져도 멤버는 사라지지 않고, 프로그램이 종료될 때 사라짐.
	// 공유 특성 : static 멤버들은 동일한 클래스의 모든 객체에 의해 공유
	// static는 전역 변수와 전역 함수, 공유 멤버를 작성할 때 활용.

	// 리턴 타입 : void
	// 메소드 이름 : main

	// 메소드 인자 : String[] args
	// 메소드 인자 전달에서, 기본 타입의 값은 값을 복사, 그 외 객체, 배열들은 레퍼런스(주소) 전달
	static void replaceSpace(char a[]) {
		for (int i = 0; i < a.length; i++)
			if (a[i] == ' ')
				a[i] = ','; // 공간이 하나밖에 없으므로 문자 하나만 대입가능
	}

	static void printCharArray(char a[]) {
		for (int i = 0; i < a.length; i++)
			System.out.print(a[i]);
		System.out.println(); // 줄나눔을 하기 위해 선언
	}

	public static void main(String[] args) {
		
		// 단순 객체(정수, 실수, 문자 등)는 값으로 복사, 그외 배열, 리스트, 튜플 등은 주소로 매개변수로 전달한다.
		char c[] = { 'T', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 'p', 'e', 'n', 'c', 'i', 'l', '.' };
		printCharArray(c);
		replaceSpace(c);
		printCharArray(c);
	}
}

// 출력
// This is a pencil.
// This,is,a,pencil.